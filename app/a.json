============================= test session starts ==============================
platform darwin -- Python 3.11.9, pytest-8.3.4, pluggy-1.5.0
rootdir: /Users/jin/Desktop/prj/b_aviation_accidents/app
plugins: anyio-3.6.2
collected 11 items

test_main.py ssFF.F.F...                                                 [100%]

=================================== FAILURES ===================================
_____________________________ test_read_accidents ______________________________

    def test_read_accidents():
        start = 0
        size = 10
        response = client.get(f"/api/accidents?start={start}&size={size}")
        res_dict = response.json()
        key_lst = ['_id', 'date', 'fatalities', 'aircraft_status', 'location', 'time', 'airline', 'occupants']
    
        assert response.status_code == 200
>       assert len(res_dict) == 10
E       assert 0 == 10
E        +  where 0 = len([])

test_main.py:34: AssertionError
----------------------------- Captured stdout call -----------------------------
Error fetching data from OpenSearch: object dict can't be used in 'await' expression
_____________________ test_read_airline_suggestions_exist ______________________

    def test_read_airline_suggestions_exist():
        airline = "Jeju%20Air"
        response = client.get(f"/api/suggestions/{airline}")
        res_dict = response.json()
        assert response.status_code == 200
>       assert len(res_dict) >= 1
E       assert 0 >= 1
E        +  where 0 = len([])

test_main.py:44: AssertionError
----------------------------- Captured stdout call -----------------------------
Error fetching data from OpenSearch: object dict can't be used in 'await' expression
_________________________ test_read_airline_info_exist _________________________

    def test_read_airline_info_exist():
        airline = "Jeju%20Air"
        response = client.get(f"/api/information/{airline}")
        res_dict = response.json()
        key_lst = ['date', 'time', 'accident_type', 'airline', 'fatalities', 'occupants', 'aircraft_status', 'location', 'phase', 'description', 'ko_description', '_id']
    
        assert response.status_code == 200
>       assert len(res_dict) >= 1
E       assert 0 >= 1
E        +  where 0 = len([])

test_main.py:62: AssertionError
----------------------------- Captured stdout call -----------------------------
Error fetching data from OpenSearch: object dict can't be used in 'await' expression
_____________________ test_read_airline_description_exist ______________________

    def test_read_airline_description_exist():
        _id = "7eYWjpQBsnp6W0Xd8Zpo"
        response = client.get(f"/api/description/{_id}")
        res_dict = response.json()
    
        assert response.status_code == 200
>       assert "description" in res_dict
E       AssertionError: assert 'description' in {}

test_main.py:85: AssertionError
----------------------------- Captured stdout call -----------------------------
Error fetching data from OpenSearch: object dict can't be used in 'await' expression
=============================== warnings summary ===============================
test_main.py::test_read_root
test_main.py::test_read_accident
  /opt/homebrew/lib/python3.11/site-packages/_pytest/python.py:148: PytestUnhandledCoroutineWarning: async def functions are not natively supported and have been skipped.
  You need to install a suitable plugin for your async framework, for example:
    - anyio
    - pytest-asyncio
    - pytest-tornasync
    - pytest-trio
    - pytest-twisted
    warnings.warn(PytestUnhandledCoroutineWarning(msg.format(nodeid)))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED test_main.py::test_read_accidents - assert 0 == 10
FAILED test_main.py::test_read_airline_suggestions_exist - assert 0 >= 1
FAILED test_main.py::test_read_airline_info_exist - assert 0 >= 1
FAILED test_main.py::test_read_airline_description_exist - AssertionError: as...
============== 4 failed, 5 passed, 2 skipped, 2 warnings in 0.46s ==============
